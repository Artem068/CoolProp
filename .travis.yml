language: python

#os:
#  - linux
#  - osx
  
matrix:
  include:
#    - os: linux
#      sudo: required
#      python: 3.2
#      env: TOXENV=py32
#    - os: linux
#      sudo: required
#      python: 3.3
#      env: TOXENV=py33
#    - os: osx
#      language: generic
#      env: TOXENV=py32
#    - os: osx
#      language: generic
#      env: TOXENV=py33  
    - os: linux
      dist: trusty
      sudo: required # false or required, use required to get docker
    - os: linux
      dist: precise
      sudo: required # false or required
    - os: linux
      dist: trusty
      sudo: false # false or required
    - os: linux
      dist: precise
      sudo: false # false or required
    - os: osx
      language: generic
      osx_image: xcode8.3 #	Xcode 8.3 	OS X 10.12
    - os: osx
      language: generic
      osx_image: xcode8.2 #	Xcode 8.2 	OS X 10.12
    - os: osx
      language: generic
      osx_image: xcode8.1 #	Xcode 8.1 	OS X 10.12
    - os: osx
      language: generic
      osx_image: xcode8 #	Xcode 8gm 	OS X 10.11
    - os: osx
      language: generic
      osx_image: xcode7.3 # Default 	Xcode 7.3.1 	OS X 10.11
    - os: osx
      language: generic
      osx_image: xcode6.4 #	Xcode 6.4 	OS X 10.10 
      
  
#    - os: linux
#      dist: trusty
#      sudo: required
#    - os: osx
#      osx_image: xcode7.2

#addons:
#  apt:
#    packages:
#      - cmake

#before_install:
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update       ; fi
#  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew install cmake; fi
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get update       ; fi
#  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then sudo apt-get install cmake; fi

#See: http://stackoverflow.com/questions/41916656/how-to-use-travis-ci-to-build-modern-c-using-modern-cmake
#dist: trusty
#sudo: required
#language:
#  - cpp
#compiler:
#  - gcc
#language: 
#  - python
install: 
  - "pip install cython wheel"
#addons:
#  apt:
#    sources:
#      - ubuntu-toolchain-r-test
#    packages:
#      - gcc-6
#      - g++-6
#      - cmake
# Build all branches
branches:
  only:
    - /.*/
script:
#  # Link gcc-6 and g++-6 to their standard commands
#  - ln -s /usr/bin/gcc-6 /usr/local/bin/gcc
#  - ln -s /usr/bin/g++-6 /usr/local/bin/g++
#  # Export CC and CXX to tell cmake which compiler to use
#  - export CC=/usr/bin/gcc-6
#  - export CXX=/usr/bin/g++-6
#  # Check versions of gcc, g++ and cmake
#  - gcc -v && g++ -v && cmake --version
#  # Run your build commands next
#  - git clone --recursive https://github.com/CoolProp/CoolProp.git
#  - cd CoolProp
#  - mkdir build
#  - cd build
#  - cmake .. -DCOOLPROP_SHARED_LIBRARY=ON
#  - cmake --build . --config Release
  - cd wrappers/Python
  - python setup.py install
  - cd ../..
  - python -c 'from CoolProp.CoolProp import get_global_param_string; print("CoolProp gitrevision:", get_global_param_string("gitrevision"))'
